/*
 * Copyright 2015 Raffael Herzog
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



def jmhVersion = '1.5.2'

dependencies {
    jmhCompile files(jar.archivePath)
    jmhCompile configurations.groovy

    jmh group:'org.openjdk.jmh', name:'jmh-core', version:jmhVersion
    jmh group:'org.openjdk.jmh', name:'jmh-generator-annprocess', version:jmhVersion
}

jmhJar {
    exclude 'ch/raffael/guards/**/*'
}

compileJmhJava.dependsOn jar


idea.module {
    testSourceDirs += sourceSets.jmh.allSource.srcDirs
    scopes.TEST.plus += [ configurations.jmhCompile ]
}

tasks.remove(tasks.jmh)
task('jmh') {
    dependsOn jmhJar, jar

    doFirst {
        def javaExecutable = project.properties['jmh.java']?:"${System.getProperty('java.home')}/bin/java"
        def agentPath = jar.archivePath
        def label = project.properties['jmh.label'] as String
        if ( !label ) {
            label = 'default'
        }

        def jmhRunDir = file("$buildDir/jmh/$label")
        def jmhAllResults = new File(jmhRunDir, "results.txt")
        def jmhAllLogs = new File(jmhRunDir, "logs.txt")

        println "JMH directory: $jmhRunDir"
        mkdir jmhRunDir
        jmhRunDir.listFiles().each { f -> f.delete() }

        def cp = sourceSets.jmh.runtimeClasspath
        println "JMH Classpath: $cp.files"
        javaexec {
            classpath = cp
            main = 'run.RunBenchmarks'
            workingDir = jmhRunDir
            args = [ javaExecutable, agentPath ]
        }

        jmhAllResults.withWriter { concat ->
            fileTree(dir:jmhRunDir, include:"result-*.txt").sort().each { f ->
                f.withReader { part ->
                    def n = f.toString()
                    n = n.substring(n.indexOf('--') + 2, n.length() - 4)
                    concat << "$n\n${'~'*n.length()}\n" << part << '\n\n'
                }
            }
        }
        jmhAllLogs.withWriter { concat ->
            fileTree(dir:jmhRunDir, include:"log-*.txt").sort().each { f ->
                f.withReader { part ->
                    concat << part << '\n'
                }
            }
        }
    }
}

task('runSimpleBenchmark') {
    dependsOn compileJmhJava

    String[] agentArgs = [
            '+dump',
            //'nopMethod=dedicated_method',
            '-nopMode',
            //'multiGuardMethod=mh_guard',
            //'-mutableCallSites',
    ]

    doFirst {
        println '~' * 80
        def cp = sourceSets.jmh.runtimeClasspath
        println "Agent args: $agentArgs"
        if (  project.properties['printcp'] == 'true' ) {
            println "Classpath: ["
            cp.each { f ->
                println "    $f"
            }
            println ']'
        }
        println '~' * 80
        javaexec {
            main = 'verysimple.Test'
            if ( project.properties['noagent'] != 'true' ) {
                jvmArgs = [ "-javaagent:${pseudoAgentJar.archivePath}=${agentArgs.join(',')}" ]
            }
            classpath = cp
//            args = [ "${agentArgs.join(',')}" ]
        }
        println '~' * 80
    }
}
